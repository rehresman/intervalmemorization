{"ast":null,"code":"import _classCallCheck from\"/Users/ryanehresman/Documents/JS/create-react-app-next/musicstudy/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/ryanehresman/Documents/JS/create-react-app-next/musicstudy/node_modules/@babel/runtime/helpers/esm/createClass\";import _createSuper from\"/Users/ryanehresman/Documents/JS/create-react-app-next/musicstudy/node_modules/@babel/runtime/helpers/esm/createSuper\";import _inherits from\"/Users/ryanehresman/Documents/JS/create-react-app-next/musicstudy/node_modules/@babel/runtime/helpers/esm/inherits\";import React from\"react\";import{connect}from\"react-redux\";import{startTime,updateTime}from\"./actions/index\";var Stopwatch=/*#__PURE__*/function(_React$Component){_inherits(Stopwatch,_React$Component);var _super=_createSuper(Stopwatch);function Stopwatch(){var _this;_classCallCheck(this,Stopwatch);_this=_super.call(this);_this.state={interval:null};return _this;}_createClass(Stopwatch,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;//TODO: make this tick every 100ms\n//TODO: This won't work if the session goes through midnight\nthis.setState({interval:setInterval(function(){return _this2.props.dispatch(updateTime(new Date().getTime()));},100)});this.props.dispatch(startTime(new Date().getTime()));}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){clearInterval(this.state.interval);//TODO: Clear redux store data too on unmount\n}},{key:\"render\",value:function render(){var value=Math.round((this.props.time.currentTime-this.props.time.start)/1000);var seconds=value%60;var minutes=Math.floor(value/60);var zero=seconds<10?0:\"\";return/*#__PURE__*/React.createElement(\"time\",{id:\"timer\"},minutes,\":\",zero,seconds);}}]);return Stopwatch;}(React.Component);function mapStateToProps(_ref){var notes=_ref.notes,viewControls=_ref.viewControls,time=_ref.time;return{notes:notes,viewControls:viewControls,time:time};}export default connect(mapStateToProps)(Stopwatch);","map":{"version":3,"sources":["/Users/ryanehresman/Documents/JS/create-react-app-next/musicstudy/src/stopwatch.js"],"names":["React","connect","startTime","updateTime","Stopwatch","state","interval","setState","setInterval","props","dispatch","Date","getTime","clearInterval","value","Math","round","time","currentTime","start","seconds","minutes","floor","zero","Component","mapStateToProps","notes","viewControls"],"mappings":"gkBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,OAASC,SAAT,CAAoBC,UAApB,KAAsC,iBAAtC,C,GAEMC,CAAAA,S,kHACL,oBAAc,2CACb,wBACA,MAAKC,KAAL,CAAa,CACZC,QAAQ,CAAE,IADE,CAAb,CAFa,aAKb,C,mFAEmB,iBACnB;AACA;AACA,KAAKC,QAAL,CAAc,CACbD,QAAQ,CAAEE,WAAW,CACpB,iBAAM,CAAA,MAAI,CAACC,KAAL,CAAWC,QAAX,CAAoBP,UAAU,CAAC,GAAIQ,CAAAA,IAAJ,GAAWC,OAAX,EAAD,CAA9B,CAAN,EADoB,CAEpB,GAFoB,CADR,CAAd,EAMA,KAAKH,KAAL,CAAWC,QAAX,CAAoBR,SAAS,CAAC,GAAIS,CAAAA,IAAJ,GAAWC,OAAX,EAAD,CAA7B,EACA,C,mEAEsB,CACtBC,aAAa,CAAC,KAAKR,KAAL,CAAWC,QAAZ,CAAb,CACA;AACA,C,uCAEQ,CACR,GAAMQ,CAAAA,KAAK,CAAGC,IAAI,CAACC,KAAL,CACb,CAAC,KAAKP,KAAL,CAAWQ,IAAX,CAAgBC,WAAhB,CAA8B,KAAKT,KAAL,CAAWQ,IAAX,CAAgBE,KAA/C,EAAwD,IAD3C,CAAd,CAGA,GAAMC,CAAAA,OAAO,CAAGN,KAAK,CAAG,EAAxB,CACA,GAAMO,CAAAA,OAAO,CAAGN,IAAI,CAACO,KAAL,CAAWR,KAAK,CAAG,EAAnB,CAAhB,CACA,GAAMS,CAAAA,IAAI,CAAGH,OAAO,CAAG,EAAV,CAAe,CAAf,CAAmB,EAAhC,CACA,mBACC,4BAAM,EAAE,CAAC,OAAT,EACEC,OADF,KACYE,IADZ,CAEEH,OAFF,CADD,CAMA,C,uBAtCsBpB,KAAK,CAACwB,S,EAyC9B,QAASC,CAAAA,eAAT,MAAwD,IAA7BC,CAAAA,KAA6B,MAA7BA,KAA6B,CAAtBC,YAAsB,MAAtBA,YAAsB,CAARV,IAAQ,MAARA,IAAQ,CACvD,MAAO,CAAES,KAAK,CAALA,KAAF,CAASC,YAAY,CAAZA,YAAT,CAAuBV,IAAI,CAAJA,IAAvB,CAAP,CACA,CAED,cAAehB,CAAAA,OAAO,CAACwB,eAAD,CAAP,CAAyBrB,SAAzB,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { startTime, updateTime } from \"./actions/index\";\n\nclass Stopwatch extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tinterval: null,\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\t//TODO: make this tick every 100ms\n\t\t//TODO: This won't work if the session goes through midnight\n\t\tthis.setState({\n\t\t\tinterval: setInterval(\n\t\t\t\t() => this.props.dispatch(updateTime(new Date().getTime())),\n\t\t\t\t100\n\t\t\t),\n\t\t});\n\t\tthis.props.dispatch(startTime(new Date().getTime()));\n\t}\n\n\tcomponentWillUnmount() {\n\t\tclearInterval(this.state.interval);\n\t\t//TODO: Clear redux store data too on unmount\n\t}\n\n\trender() {\n\t\tconst value = Math.round(\n\t\t\t(this.props.time.currentTime - this.props.time.start) / 1000\n\t\t);\n\t\tconst seconds = value % 60;\n\t\tconst minutes = Math.floor(value / 60);\n\t\tconst zero = seconds < 10 ? 0 : \"\";\n\t\treturn (\n\t\t\t<time id=\"timer\">\n\t\t\t\t{minutes}:{zero}\n\t\t\t\t{seconds}\n\t\t\t</time>\n\t\t);\n\t}\n}\n\nfunction mapStateToProps({ notes, viewControls, time }) {\n\treturn { notes, viewControls, time };\n}\n\nexport default connect(mapStateToProps)(Stopwatch);\n"]},"metadata":{},"sourceType":"module"}