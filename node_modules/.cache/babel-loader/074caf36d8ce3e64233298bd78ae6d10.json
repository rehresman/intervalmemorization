{"ast":null,"code":"export function getCurrentProbability(state){return state.interval.probability;}export function getResponseTime(prevStats,time){return time-prevStats.flashcardShownTime;}export function getSampleMean(prevStats,responseTime){var increase=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;return(responseTime+prevStats.sumResponseTime)/(prevStats.numResponses+increase);}export function getResponseDeviation(prevStats,responseTime){return Math.pow(responseTime-prevStats.sampleMean,2);}export function getSampleVariance(prevStats,currentVariance){var solution=prevStats.numResponses>1?(prevStats.sumTestVariance+currentVariance)/prevStats.numResponses:6250000;if(solution>=Number.MAX_VALUE){alert(\"Variance overflow.  Need to fix this\");}return solution;}export function getAlpha(sampleMean,sampleVariance){return Math.pow(sampleMean,2)/sampleVariance;}export function getBeta(sampleMean,sampleVariance){return sampleMean/sampleVariance;}","map":{"version":3,"sources":["/Users/ryanehresman/Documents/JS/create-react-app-next/musicstudy/src/statistics.js"],"names":["getCurrentProbability","state","interval","probability","getResponseTime","prevStats","time","flashcardShownTime","getSampleMean","responseTime","increase","sumResponseTime","numResponses","getResponseDeviation","Math","pow","sampleMean","getSampleVariance","currentVariance","solution","sumTestVariance","Number","MAX_VALUE","alert","getAlpha","sampleVariance","getBeta"],"mappings":"AAAA,MAAO,SAASA,CAAAA,qBAAT,CAA+BC,KAA/B,CAAsC,CAC5C,MAAOA,CAAAA,KAAK,CAACC,QAAN,CAAeC,WAAtB,CACA,CAED,MAAO,SAASC,CAAAA,eAAT,CAAyBC,SAAzB,CAAoCC,IAApC,CAA0C,CAChD,MAAOA,CAAAA,IAAI,CAAGD,SAAS,CAACE,kBAAxB,CACA,CAED,MAAO,SAASC,CAAAA,aAAT,CAAuBH,SAAvB,CAAkCI,YAAlC,CAA8D,IAAdC,CAAAA,QAAc,2DAAH,CAAG,CACpE,MACC,CAACD,YAAY,CAAGJ,SAAS,CAACM,eAA1B,GACCN,SAAS,CAACO,YAAV,CAAyBF,QAD1B,CADD,CAIA,CAED,MAAO,SAASG,CAAAA,oBAAT,CAA8BR,SAA9B,CAAyCI,YAAzC,CAAuD,CAC7D,MAAOK,CAAAA,IAAI,CAACC,GAAL,CAASN,YAAY,CAAGJ,SAAS,CAACW,UAAlC,CAA8C,CAA9C,CAAP,CACA,CAED,MAAO,SAASC,CAAAA,iBAAT,CAA2BZ,SAA3B,CAAsCa,eAAtC,CAAuD,CAC7D,GAAMC,CAAAA,QAAQ,CACbd,SAAS,CAACO,YAAV,CAAyB,CAAzB,CACG,CAACP,SAAS,CAACe,eAAV,CAA4BF,eAA7B,EAAgDb,SAAS,CAACO,YAD7D,CAEG,OAHJ,CAIA,GAAIO,QAAQ,EAAIE,MAAM,CAACC,SAAvB,CAAkC,CACjCC,KAAK,CAAC,sCAAD,CAAL,CACA,CACD,MAAOJ,CAAAA,QAAP,CACA,CAED,MAAO,SAASK,CAAAA,QAAT,CAAkBR,UAAlB,CAA8BS,cAA9B,CAA8C,CACpD,MAAOX,CAAAA,IAAI,CAACC,GAAL,CAASC,UAAT,CAAqB,CAArB,EAA0BS,cAAjC,CACA,CAED,MAAO,SAASC,CAAAA,OAAT,CAAiBV,UAAjB,CAA6BS,cAA7B,CAA6C,CACnD,MAAOT,CAAAA,UAAU,CAAGS,cAApB,CACA","sourcesContent":["export function getCurrentProbability(state) {\n\treturn state.interval.probability;\n}\n\nexport function getResponseTime(prevStats, time) {\n\treturn time - prevStats.flashcardShownTime;\n}\n\nexport function getSampleMean(prevStats, responseTime, increase = 1) {\n\treturn (\n\t\t(responseTime + prevStats.sumResponseTime) /\n\t\t(prevStats.numResponses + increase)\n\t);\n}\n\nexport function getResponseDeviation(prevStats, responseTime) {\n\treturn Math.pow(responseTime - prevStats.sampleMean, 2);\n}\n\nexport function getSampleVariance(prevStats, currentVariance) {\n\tconst solution =\n\t\tprevStats.numResponses > 1\n\t\t\t? (prevStats.sumTestVariance + currentVariance) / prevStats.numResponses\n\t\t\t: 6250000;\n\tif (solution >= Number.MAX_VALUE) {\n\t\talert(\"Variance overflow.  Need to fix this\");\n\t}\n\treturn solution;\n}\n\nexport function getAlpha(sampleMean, sampleVariance) {\n\treturn Math.pow(sampleMean, 2) / sampleVariance;\n}\n\nexport function getBeta(sampleMean, sampleVariance) {\n\treturn sampleMean / sampleVariance;\n}\n"]},"metadata":{},"sourceType":"module"}