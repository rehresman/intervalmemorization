{"ast":null,"code":"var _jsxFileName = \"/Users/ryanehresman/Documents/JS/create-react-app-next/musicstudy/src/stopwatch.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { startTime, updateTime } from \"./actions/index\";\n\nclass Stopwatch extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      interval: null,\n      color: \"#fff\"\n    };\n    this.changeColor = this.changeColor.bind(this);\n  }\n\n  changeColor() {\n    const r = Math.floor(Math.random() * 7);\n    let color;\n\n    switch (r) {\n      case 0:\n        color = \"#007bff\";\n        break;\n\n      case 1:\n        color = \"#28a745\";\n        break;\n\n      case 2:\n        color = \"#dc3545\";\n        break;\n\n      case 3:\n        color = \"#ffc107\";\n        break;\n\n      case 4:\n        color = \"#17A2BD\";\n        break;\n\n      case 5:\n        color = \"#fff\";\n        break;\n    }\n\n    this.setState({\n      color\n    });\n  }\n\n  componentDidMount() {\n    //TODO: make this tick every 100ms\n    //TODO: This won't work if the session goes through midnight\n    this.setState({\n      interval: setInterval(() => this.props.dispatch(updateTime(new Date().getTime())), 100)\n    });\n    this.props.dispatch(startTime(new Date().getTime()));\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const currentValue = Math.round((this.props.time.currentTime - this.props.time.start) / 1000);\n    const prevValue = Math.round((prevProps.time.currentTime - prevProps.time.start) / 1000);\n\n    if (currentValue !== prevValue) {\n      this.changeColor();\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.state.interval); //TODO: Clear redux store data too on unmount\n  }\n\n  render() {\n    const value = Math.round((this.props.time.currentTime - this.props.time.start) / 1000);\n    const seconds = value % 60;\n    const minutes = Math.floor(value / 60);\n    const zero = seconds < 10 ? 0 : \"\";\n    return /*#__PURE__*/React.createElement(\"time\", {\n      id: \"timer\",\n      className: \"border py-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"code\", {\n      style: {\n        color: this.state.color\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 5\n      }\n    }, minutes, \":\", zero, seconds));\n  }\n\n}\n\nfunction mapStateToProps({\n  notes,\n  viewControls,\n  time\n}) {\n  return {\n    notes,\n    viewControls,\n    time\n  };\n}\n\nexport default connect(mapStateToProps)(Stopwatch);","map":{"version":3,"sources":["/Users/ryanehresman/Documents/JS/create-react-app-next/musicstudy/src/stopwatch.js"],"names":["React","connect","startTime","updateTime","Stopwatch","Component","constructor","state","interval","color","changeColor","bind","r","Math","floor","random","setState","componentDidMount","setInterval","props","dispatch","Date","getTime","componentDidUpdate","prevProps","prevState","currentValue","round","time","currentTime","start","prevValue","componentWillUnmount","clearInterval","render","value","seconds","minutes","zero","mapStateToProps","notes","viewControls"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { startTime, updateTime } from \"./actions/index\";\n\nclass Stopwatch extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tinterval: null,\n\t\t\tcolor: \"#fff\",\n\t\t};\n\t\tthis.changeColor = this.changeColor.bind(this);\n\t}\n\n\tchangeColor() {\n\t\tconst r = Math.floor(Math.random() * 7);\n\t\tlet color;\n\t\tswitch (r) {\n\t\t\tcase 0:\n\t\t\t\tcolor = \"#007bff\";\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tcolor = \"#28a745\";\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tcolor = \"#dc3545\";\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tcolor = \"#ffc107\";\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tcolor = \"#17A2BD\";\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tcolor = \"#fff\";\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.setState({ color });\n\t}\n\n\tcomponentDidMount() {\n\t\t//TODO: make this tick every 100ms\n\t\t//TODO: This won't work if the session goes through midnight\n\t\tthis.setState({\n\t\t\tinterval: setInterval(\n\t\t\t\t() => this.props.dispatch(updateTime(new Date().getTime())),\n\t\t\t\t100\n\t\t\t),\n\t\t});\n\t\tthis.props.dispatch(startTime(new Date().getTime()));\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tconst currentValue = Math.round(\n\t\t\t(this.props.time.currentTime - this.props.time.start) / 1000\n\t\t);\n\t\tconst prevValue = Math.round(\n\t\t\t(prevProps.time.currentTime - prevProps.time.start) / 1000\n\t\t);\n\t\tif (currentValue !== prevValue) {\n\t\t\tthis.changeColor();\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tclearInterval(this.state.interval);\n\t\t//TODO: Clear redux store data too on unmount\n\t}\n\n\trender() {\n\t\tconst value = Math.round(\n\t\t\t(this.props.time.currentTime - this.props.time.start) / 1000\n\t\t);\n\t\tconst seconds = value % 60;\n\t\tconst minutes = Math.floor(value / 60);\n\t\tconst zero = seconds < 10 ? 0 : \"\";\n\t\treturn (\n\t\t\t<time id=\"timer\" className=\"border py-3\">\n\t\t\t\t<code style={{ color: this.state.color }}>\n\t\t\t\t\t{minutes}:{zero}\n\t\t\t\t\t{seconds}\n\t\t\t\t</code>\n\t\t\t</time>\n\t\t);\n\t}\n}\n\nfunction mapStateToProps({ notes, viewControls, time }) {\n\treturn { notes, viewControls, time };\n}\n\nexport default connect(mapStateToProps)(Stopwatch);\n"]},"metadata":{},"sourceType":"module"}