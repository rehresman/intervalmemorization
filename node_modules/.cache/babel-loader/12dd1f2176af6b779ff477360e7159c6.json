{"ast":null,"code":"var _jsxFileName = \"/Users/ryanehresman/Documents/JS/create-react-app-next/musicstudy/src/stopwatch.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { startTime, updateTime } from \"./actions/index\";\n\nclass Stopwatch extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      interval: null,\n      color: \"#fff\"\n    };\n  }\n\n  componentDidMount() {\n    //TODO: make this tick every 100ms\n    //TODO: This won't work if the session goes through midnight\n    this.setState({\n      interval: setInterval(() => this.props.dispatch(updateTime(new Date().getTime())), 100)\n    });\n    this.props.dispatch(startTime(new Date().getTime()));\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.time.currentTime !== prevProps.time.currentTime) {\n      this.changeColor();\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.state.interval); //TODO: Clear redux store data too on unmount\n  }\n\n  render() {\n    const value = Math.round((this.props.time.currentTime - this.props.time.start) / 1000);\n    const seconds = value % 60;\n    const minutes = Math.floor(value / 60);\n    const zero = seconds < 10 ? 0 : \"\";\n    return /*#__PURE__*/React.createElement(\"time\", {\n      id: \"timer\",\n      className: \"border py-3\",\n      style: {\n        color: this.state.color\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 5\n      }\n    }, minutes, \":\", zero, seconds));\n  }\n\n}\n\nfunction mapStateToProps({\n  notes,\n  viewControls,\n  time\n}) {\n  return {\n    notes,\n    viewControls,\n    time\n  };\n}\n\nexport default connect(mapStateToProps)(Stopwatch);","map":{"version":3,"sources":["/Users/ryanehresman/Documents/JS/create-react-app-next/musicstudy/src/stopwatch.js"],"names":["React","connect","startTime","updateTime","Stopwatch","Component","constructor","state","interval","color","componentDidMount","setState","setInterval","props","dispatch","Date","getTime","componentDidUpdate","prevProps","prevState","time","currentTime","changeColor","componentWillUnmount","clearInterval","render","value","Math","round","start","seconds","minutes","floor","zero","mapStateToProps","notes","viewControls"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,iBAAtC;;AAEA,MAAMC,SAAN,SAAwBJ,KAAK,CAACK,SAA9B,CAAwC;AACvCC,EAAAA,WAAW,GAAG;AACb;AACA,SAAKC,KAAL,GAAa;AACZC,MAAAA,QAAQ,EAAE,IADE;AAEZC,MAAAA,KAAK,EAAE;AAFK,KAAb;AAIA;;AAEDC,EAAAA,iBAAiB,GAAG;AACnB;AACA;AACA,SAAKC,QAAL,CAAc;AACbH,MAAAA,QAAQ,EAAEI,WAAW,CACpB,MAAM,KAAKC,KAAL,CAAWC,QAAX,CAAoBX,UAAU,CAAC,IAAIY,IAAJ,GAAWC,OAAX,EAAD,CAA9B,CADc,EAEpB,GAFoB;AADR,KAAd;AAMA,SAAKH,KAAL,CAAWC,QAAX,CAAoBZ,SAAS,CAAC,IAAIa,IAAJ,GAAWC,OAAX,EAAD,CAA7B;AACA;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACxC,QAAI,KAAKN,KAAL,CAAWO,IAAX,CAAgBC,WAAhB,KAAgCH,SAAS,CAACE,IAAV,CAAeC,WAAnD,EAAgE;AAC/D,WAAKC,WAAL;AACA;AACD;;AAEDC,EAAAA,oBAAoB,GAAG;AACtBC,IAAAA,aAAa,CAAC,KAAKjB,KAAL,CAAWC,QAAZ,CAAb,CADsB,CAEtB;AACA;;AAEDiB,EAAAA,MAAM,GAAG;AACR,UAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CACb,CAAC,KAAKf,KAAL,CAAWO,IAAX,CAAgBC,WAAhB,GAA8B,KAAKR,KAAL,CAAWO,IAAX,CAAgBS,KAA/C,IAAwD,IAD3C,CAAd;AAGA,UAAMC,OAAO,GAAGJ,KAAK,GAAG,EAAxB;AACA,UAAMK,OAAO,GAAGJ,IAAI,CAACK,KAAL,CAAWN,KAAK,GAAG,EAAnB,CAAhB;AACA,UAAMO,IAAI,GAAGH,OAAO,GAAG,EAAV,GAAe,CAAf,GAAmB,EAAhC;AACA,wBACC;AACC,MAAA,EAAE,EAAC,OADJ;AAEC,MAAA,SAAS,EAAC,aAFX;AAGC,MAAA,KAAK,EAAE;AAAErB,QAAAA,KAAK,EAAE,KAAKF,KAAL,CAAWE;AAApB,OAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACEsB,OADF,OACYE,IADZ,EAEEH,OAFF,CALD,CADD;AAYA;;AAnDsC;;AAsDxC,SAASI,eAAT,CAAyB;AAAEC,EAAAA,KAAF;AAASC,EAAAA,YAAT;AAAuBhB,EAAAA;AAAvB,CAAzB,EAAwD;AACvD,SAAO;AAAEe,IAAAA,KAAF;AAASC,IAAAA,YAAT;AAAuBhB,IAAAA;AAAvB,GAAP;AACA;;AAED,eAAenB,OAAO,CAACiC,eAAD,CAAP,CAAyB9B,SAAzB,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { startTime, updateTime } from \"./actions/index\";\n\nclass Stopwatch extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tinterval: null,\n\t\t\tcolor: \"#fff\",\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\t//TODO: make this tick every 100ms\n\t\t//TODO: This won't work if the session goes through midnight\n\t\tthis.setState({\n\t\t\tinterval: setInterval(\n\t\t\t\t() => this.props.dispatch(updateTime(new Date().getTime())),\n\t\t\t\t100\n\t\t\t),\n\t\t});\n\t\tthis.props.dispatch(startTime(new Date().getTime()));\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tif (this.props.time.currentTime !== prevProps.time.currentTime) {\n\t\t\tthis.changeColor();\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tclearInterval(this.state.interval);\n\t\t//TODO: Clear redux store data too on unmount\n\t}\n\n\trender() {\n\t\tconst value = Math.round(\n\t\t\t(this.props.time.currentTime - this.props.time.start) / 1000\n\t\t);\n\t\tconst seconds = value % 60;\n\t\tconst minutes = Math.floor(value / 60);\n\t\tconst zero = seconds < 10 ? 0 : \"\";\n\t\treturn (\n\t\t\t<time\n\t\t\t\tid=\"timer\"\n\t\t\t\tclassName=\"border py-3\"\n\t\t\t\tstyle={{ color: this.state.color }}\n\t\t\t>\n\t\t\t\t<code>\n\t\t\t\t\t{minutes}:{zero}\n\t\t\t\t\t{seconds}\n\t\t\t\t</code>\n\t\t\t</time>\n\t\t);\n\t}\n}\n\nfunction mapStateToProps({ notes, viewControls, time }) {\n\treturn { notes, viewControls, time };\n}\n\nexport default connect(mapStateToProps)(Stopwatch);\n"]},"metadata":{},"sourceType":"module"}