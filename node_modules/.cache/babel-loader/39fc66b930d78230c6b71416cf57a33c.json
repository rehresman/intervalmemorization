{"ast":null,"code":"var _jsxFileName = \"/Users/ryanehresman/Documents/JS/create-react-app-next/musicstudy/src/flashcard.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { updateFlashcardShownTime, updateStats, updateProbability, savePreviousProbability } from \"./actions/index\";\nimport { getResponseTime } from \"./statistics.js\";\nimport { jStat } from \"jstat\";\n\nclass Flashcard extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      note: null,\n      interval: null,\n      answer: null,\n      showAnswer: false\n    };\n    this.chooseNext = this.chooseNext.bind(this);\n    this.getNewProbability = this.getNewProbability.bind(this);\n    this.getRandomNote = this.getRandomNote.bind(this);\n    this.getRandomInterval = this.getRandomInterval.bind(this);\n    this.getAnswer = this.getAnswer.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  chooseNext() {\n    const n = Math.floor(Math.random() * 12);\n    const i = Math.floor(Math.random() * 11) + 1;\n    const selection = this.props.notes[n].intervals[i];\n\n    if (Math.random() > selection.probability) {\n      return this.chooseNext();\n    } else {\n      return {\n        note: this.props.notes[n],\n        interval: this.props.notes[n].intervals[i]\n      };\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      note: this.getRandomNote(),\n      interval: this.getRandomInterval(),\n      answer: null\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.note !== this.state.note || prevState.interval !== this.state.interval) {\n      this.setState(this.getAnswer);\n    }\n\n    if (this.state.note !== prevState.note) {\n      console.log(this.props);\n    }\n  }\n\n  getNewProbability(prevStats, time) {\n    const responseTime = getResponseTime(prevStats, time);\n    const responseScore = jStat.gamma.cdf(responseTime, prevStats.alpha, 1 / prevStats.beta);\n    const p = this.state.interval.probability; //p=.7\n    //rS = .6\n    //output = .7 - .3 *(rS - .5)\n    // output should be .7 if rS = .5\n    //output should be greater than .7 if rS < .5\n    //output should be less than .7 if rS > .5\n\n    /*\n    \t\tex.\n    \t\t.7 - .3 * (.6 - .5) = .7 - .03 = .67.  A slight decrease in probability \n    \t\tto be shown again.\n    \t\t\n    \t\tp=.5\n    \t\trS = .5\n    \t\t.5 - .5 *(.5-.5) = .5\n    \t\t\tp = .4\n    \t\trS = .8\n    \t\t.4 - .6(.8 - .5) = .22\n    \t\t\tp = .4\n    \t\trS = .3\n    \t\t.4 - .6(.3 - .5) = .52\n    \t*/\n\n    return p + (1 - p) * (responseScore - 0.5);\n  }\n\n  getRandomNote() {\n    return this.props.notes[0];\n  }\n\n  getRandomInterval() {\n    return this.props.notes[0].intervals[1];\n  }\n\n  getAnswer(state) {\n    const number = (state.note.number + state.interval.size) % Object.entries(this.props.notes).length;\n    let answer = { ...this.props.notes[number]\n    };\n    return { ...state,\n      answer\n    };\n  }\n\n  handleClick() {\n    const time = new Date().getTime();\n\n    if (this.state.showAnswer) {\n      this.props.dispatch(updateFlashcardShownTime(time));\n      this.setState({ ...this.chooseNext(),\n        showAnswer: false\n      });\n    } else {\n      if (this.props.stats.flashcardShownTime) {\n        const probability = this.getNewProbability(this.props.stats, time);\n        this.props.dispatch(savePreviousProbability(this.state.note, this.state.interval, this.state.interval.probability));\n        this.props.dispatch(updateStats(time));\n        this.props.dispatch(updateProbability(this.state.note, this.state.interval, probability));\n      }\n\n      this.setState({\n        showAnswer: true\n      });\n    }\n  }\n\n  render() {\n    const noteDetails = this.state.note ? this.state.note.name : null;\n    const intervalDetails = this.state.interval ? this.state.interval.name : null;\n    const answerDetails = this.state.answer ? this.state.answer.name : null;\n    let answerClasses = \"answer hide\";\n    let flashcardClasses = \"border\";\n    let intervalClasses = \"interval lightgray\";\n\n    if (this.state.showAnswer) {\n      answerClasses = \"answer show\";\n      flashcardClasses = \"border bg-white text-dark\";\n      intervalClasses = \"interval darkgray\";\n    }\n\n    if (this.props.viewControls) {\n      flashcardClasses += \" hide\";\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"flashcard\",\n      className: flashcardClasses,\n      onClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"section\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 5\n      }\n    }, noteDetails), /*#__PURE__*/React.createElement(\"section\", {\n      className: intervalClasses,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 5\n      }\n    }, intervalDetails), /*#__PURE__*/React.createElement(\"section\", {\n      className: answerClasses,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 5\n      }\n    }, answerDetails));\n  }\n\n}\n\nfunction mapStateToProps({\n  notes,\n  viewControls,\n  stats\n}) {\n  return {\n    notes,\n    viewControls,\n    stats\n  };\n}\n\nexport default connect(mapStateToProps)(Flashcard);","map":{"version":3,"sources":["/Users/ryanehresman/Documents/JS/create-react-app-next/musicstudy/src/flashcard.js"],"names":["React","connect","updateFlashcardShownTime","updateStats","updateProbability","savePreviousProbability","getResponseTime","jStat","Flashcard","Component","constructor","state","note","interval","answer","showAnswer","chooseNext","bind","getNewProbability","getRandomNote","getRandomInterval","getAnswer","handleClick","n","Math","floor","random","i","selection","props","notes","intervals","probability","componentDidMount","setState","componentDidUpdate","prevProps","prevState","console","log","prevStats","time","responseTime","responseScore","gamma","cdf","alpha","beta","p","number","size","Object","entries","length","Date","getTime","dispatch","stats","flashcardShownTime","render","noteDetails","name","intervalDetails","answerDetails","answerClasses","flashcardClasses","intervalClasses","viewControls","mapStateToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n\tupdateFlashcardShownTime,\n\tupdateStats,\n\tupdateProbability,\n\tsavePreviousProbability,\n} from \"./actions/index\";\nimport { getResponseTime } from \"./statistics.js\";\nimport { jStat } from \"jstat\";\n\nclass Flashcard extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tnote: null,\n\t\t\tinterval: null,\n\t\t\tanswer: null,\n\t\t\tshowAnswer: false,\n\t\t};\n\t\tthis.chooseNext = this.chooseNext.bind(this);\n\t\tthis.getNewProbability = this.getNewProbability.bind(this);\n\t\tthis.getRandomNote = this.getRandomNote.bind(this);\n\t\tthis.getRandomInterval = this.getRandomInterval.bind(this);\n\t\tthis.getAnswer = this.getAnswer.bind(this);\n\t\tthis.handleClick = this.handleClick.bind(this);\n\t}\n\n\tchooseNext() {\n\t\tconst n = Math.floor(Math.random() * 12);\n\t\tconst i = Math.floor(Math.random() * 11) + 1;\n\t\tconst selection = this.props.notes[n].intervals[i];\n\t\tif (Math.random() > selection.probability) {\n\t\t\treturn this.chooseNext();\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tnote: this.props.notes[n],\n\t\t\t\tinterval: this.props.notes[n].intervals[i],\n\t\t\t};\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.setState({\n\t\t\tnote: this.getRandomNote(),\n\t\t\tinterval: this.getRandomInterval(),\n\t\t\tanswer: null,\n\t\t});\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tif (\n\t\t\tprevState.note !== this.state.note ||\n\t\t\tprevState.interval !== this.state.interval\n\t\t) {\n\t\t\tthis.setState(this.getAnswer);\n\t\t}\n\t\tif (this.state.note !== prevState.note) {\n\t\t\tconsole.log(this.props);\n\t\t}\n\t}\n\n\tgetNewProbability(prevStats, time) {\n\t\tconst responseTime = getResponseTime(prevStats, time);\n\t\tconst responseScore = jStat.gamma.cdf(\n\t\t\tresponseTime,\n\t\t\tprevStats.alpha,\n\t\t\t1 / prevStats.beta\n\t\t);\n\t\tconst p = this.state.interval.probability;\n\n\t\t//p=.7\n\t\t//rS = .6\n\t\t//output = .7 - .3 *(rS - .5)\n\t\t// output should be .7 if rS = .5\n\t\t//output should be greater than .7 if rS < .5\n\t\t//output should be less than .7 if rS > .5\n\t\t/*\n\t\t\t\tex.\n\t\t\t\t.7 - .3 * (.6 - .5) = .7 - .03 = .67.  A slight decrease in probability \n\t\t\t\tto be shown again.\n\t\t\t\t\n\t\t\t\tp=.5\n\t\t\t\trS = .5\n\t\t\t\t.5 - .5 *(.5-.5) = .5\n\n\t\t\t\tp = .4\n\t\t\t\trS = .8\n\t\t\t\t.4 - .6(.8 - .5) = .22\n\n\t\t\t\tp = .4\n\t\t\t\trS = .3\n\t\t\t\t.4 - .6(.3 - .5) = .52\n\n\t\t*/\n\n\t\treturn p + (1 - p) * (responseScore - 0.5);\n\t}\n\n\tgetRandomNote() {\n\t\treturn this.props.notes[0];\n\t}\n\n\tgetRandomInterval() {\n\t\treturn this.props.notes[0].intervals[1];\n\t}\n\n\tgetAnswer(state) {\n\t\tconst number =\n\t\t\t(state.note.number + state.interval.size) %\n\t\t\tObject.entries(this.props.notes).length;\n\t\tlet answer = { ...this.props.notes[number] };\n\t\treturn { ...state, answer };\n\t}\n\n\thandleClick() {\n\t\tconst time = new Date().getTime();\n\t\tif (this.state.showAnswer) {\n\t\t\tthis.props.dispatch(updateFlashcardShownTime(time));\n\t\t\tthis.setState({\n\t\t\t\t...this.chooseNext(),\n\t\t\t\tshowAnswer: false,\n\t\t\t});\n\t\t} else {\n\t\t\tif (this.props.stats.flashcardShownTime) {\n\t\t\t\tconst probability = this.getNewProbability(this.props.stats, time);\n\t\t\t\tthis.props.dispatch(\n\t\t\t\t\tsavePreviousProbability(\n\t\t\t\t\t\tthis.state.note,\n\t\t\t\t\t\tthis.state.interval,\n\t\t\t\t\t\tthis.state.interval.probability\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\tthis.props.dispatch(updateStats(time));\n\t\t\t\tthis.props.dispatch(\n\t\t\t\t\tupdateProbability(this.state.note, this.state.interval, probability)\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis.setState({ showAnswer: true });\n\t\t}\n\t}\n\n\trender() {\n\t\tconst noteDetails = this.state.note ? this.state.note.name : null;\n\t\tconst intervalDetails = this.state.interval\n\t\t\t? this.state.interval.name\n\t\t\t: null;\n\t\tconst answerDetails = this.state.answer ? this.state.answer.name : null;\n\t\tlet answerClasses = \"answer hide\";\n\t\tlet flashcardClasses = \"border\";\n\t\tlet intervalClasses = \"interval lightgray\";\n\t\tif (this.state.showAnswer) {\n\t\t\tanswerClasses = \"answer show\";\n\t\t\tflashcardClasses = \"border bg-white text-dark\";\n\t\t\tintervalClasses = \"interval darkgray\";\n\t\t}\n\t\tif (this.props.viewControls) {\n\t\t\tflashcardClasses += \" hide\";\n\t\t}\n\t\treturn (\n\t\t\t<div\n\t\t\t\tid=\"flashcard\"\n\t\t\t\tclassName={flashcardClasses}\n\t\t\t\tonClick={this.handleClick}\n\t\t\t>\n\t\t\t\t<section className=\"note\">{noteDetails}</section>\n\t\t\t\t<section className={intervalClasses}>{intervalDetails}</section>\n\t\t\t\t<section className={answerClasses}>{answerDetails}</section>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nfunction mapStateToProps({ notes, viewControls, stats }) {\n\treturn { notes, viewControls, stats };\n}\n\nexport default connect(mapStateToProps)(Flashcard);\n"]},"metadata":{},"sourceType":"module"}