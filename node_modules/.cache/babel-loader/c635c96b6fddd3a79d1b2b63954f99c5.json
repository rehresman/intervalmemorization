{"ast":null,"code":"export function getCurrentProbability(state) {\n  return state.interval.probability;\n}\nexport function getResponseTime(prevStats, time) {\n  return time - prevStats.flashcardShownTime;\n}\nexport function getSampleMean(prevStats, responseTime) {\n  return (responseTime + prevStats.sumResponseTime) / (prevStats.numResponses + 1);\n}\nexport function getResponseDeviation(prevStats, responseTime) {\n  return Math.pow(responseTime - prevStats.sampleMean, 2);\n}\nexport function getSampleVariance(prevStats, currentVariance) {\n  const solution = prevStats.numResponses > 1 ? (prevStats.sumTestVariance + currentVariance) / prevStats.numResponses : 0;\n\n  if (solution >= Number.MAX_VALUE) {\n    alert(\"Variance overflow.  Need to fix this\");\n  }\n\n  return solution;\n}\nexport function getAlpha(sampleMean, sampleVariance) {\n  return Math.pow(sampleMean, 2) / sampleVariance;\n}\nexport function getBeta(sampleMean, sampleVariance) {\n  return sampleMean / sampleVariance;\n}","map":{"version":3,"sources":["/Users/ryanehresman/Documents/JS/create-react-app-next/musicstudy/src/statistics.js"],"names":["getCurrentProbability","state","interval","probability","getResponseTime","prevStats","time","flashcardShownTime","getSampleMean","responseTime","sumResponseTime","numResponses","getResponseDeviation","Math","pow","sampleMean","getSampleVariance","currentVariance","solution","sumTestVariance","Number","MAX_VALUE","alert","getAlpha","sampleVariance","getBeta"],"mappings":"AAAA,OAAO,SAASA,qBAAT,CAA+BC,KAA/B,EAAsC;AAC5C,SAAOA,KAAK,CAACC,QAAN,CAAeC,WAAtB;AACA;AAED,OAAO,SAASC,eAAT,CAAyBC,SAAzB,EAAoCC,IAApC,EAA0C;AAChD,SAAOA,IAAI,GAAGD,SAAS,CAACE,kBAAxB;AACA;AAED,OAAO,SAASC,aAAT,CAAuBH,SAAvB,EAAkCI,YAAlC,EAAgD;AACtD,SACC,CAACA,YAAY,GAAGJ,SAAS,CAACK,eAA1B,KAA8CL,SAAS,CAACM,YAAV,GAAyB,CAAvE,CADD;AAGA;AAED,OAAO,SAASC,oBAAT,CAA8BP,SAA9B,EAAyCI,YAAzC,EAAuD;AAC7D,SAAOI,IAAI,CAACC,GAAL,CAASL,YAAY,GAAGJ,SAAS,CAACU,UAAlC,EAA8C,CAA9C,CAAP;AACA;AAED,OAAO,SAASC,iBAAT,CAA2BX,SAA3B,EAAsCY,eAAtC,EAAuD;AAC7D,QAAMC,QAAQ,GACbb,SAAS,CAACM,YAAV,GAAyB,CAAzB,GACG,CAACN,SAAS,CAACc,eAAV,GAA4BF,eAA7B,IAAgDZ,SAAS,CAACM,YAD7D,GAEG,CAHJ;;AAIA,MAAIO,QAAQ,IAAIE,MAAM,CAACC,SAAvB,EAAkC;AACjCC,IAAAA,KAAK,CAAC,sCAAD,CAAL;AACA;;AACD,SAAOJ,QAAP;AACA;AAED,OAAO,SAASK,QAAT,CAAkBR,UAAlB,EAA8BS,cAA9B,EAA8C;AACpD,SAAOX,IAAI,CAACC,GAAL,CAASC,UAAT,EAAqB,CAArB,IAA0BS,cAAjC;AACA;AAED,OAAO,SAASC,OAAT,CAAiBV,UAAjB,EAA6BS,cAA7B,EAA6C;AACnD,SAAOT,UAAU,GAAGS,cAApB;AACA","sourcesContent":["export function getCurrentProbability(state) {\n\treturn state.interval.probability;\n}\n\nexport function getResponseTime(prevStats, time) {\n\treturn time - prevStats.flashcardShownTime;\n}\n\nexport function getSampleMean(prevStats, responseTime) {\n\treturn (\n\t\t(responseTime + prevStats.sumResponseTime) / (prevStats.numResponses + 1)\n\t);\n}\n\nexport function getResponseDeviation(prevStats, responseTime) {\n\treturn Math.pow(responseTime - prevStats.sampleMean, 2);\n}\n\nexport function getSampleVariance(prevStats, currentVariance) {\n\tconst solution =\n\t\tprevStats.numResponses > 1\n\t\t\t? (prevStats.sumTestVariance + currentVariance) / prevStats.numResponses\n\t\t\t: 0;\n\tif (solution >= Number.MAX_VALUE) {\n\t\talert(\"Variance overflow.  Need to fix this\");\n\t}\n\treturn solution;\n}\n\nexport function getAlpha(sampleMean, sampleVariance) {\n\treturn Math.pow(sampleMean, 2) / sampleVariance;\n}\n\nexport function getBeta(sampleMean, sampleVariance) {\n\treturn sampleMean / sampleVariance;\n}\n"]},"metadata":{},"sourceType":"module"}